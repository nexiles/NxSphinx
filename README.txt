==============================================
NxSphinx - A Test-Project on how to use Sphinx
==============================================

.. contents ::


Introduction
------------

Sphinx is a useful tool for generating documentation from rst-files and docstrings in your python and C/C++ files.
The complete documentation of Sphinx can be found on http://sphinx.pocoo.org/

This project contains also a theme named *nexiles_theme* where the look and feel of nexiles is implemented.


Installation
------------

There are two ways to install Sphinx:

you can either use::

    easy_install Sphinx

or you can include it to your buildout by adding::

    [buildout]
    parts += sphinxbuilder

    [sphinxbuilder]
    recipe = collective.recipe.sphinxbuilder
    interpreter = ${buildout:directory}/bin/zopepy


Usage
-----

Once installed, you can use sphinx-quickstart to generate the hierarchical document structure.
It is important that you enable the autodoc-function if asked, so that the module's and classe's
docstrings will be included automatically.

The two files index.rst and conf.py, which are located in the doc-folder, contain the main configuration.

important note
--------------
::

    For Sphinx (actually, the Python interpreter that executes Sphinx) to find
    your module, it must be importable.  That means that the module or the
    package must be in one of the directories on :data:`sys.path` -- adapt your
    :data:`sys.path` in the configuration file accordingly,
    e.g. export PYTHONPATH=$PYTHONPATH:~/develop/nexiles/NxSphinx


Example *index.rst*
-------------------
::

    sphinxtest documentation master file, created by
    sphinx-quickstart on Mon May 23 16:19:39 2011.
    You can adapt this file completely to your liking, but it should at least
    contain the root `toctree` directive.

    Welcome to sphinxtest's documentation!
    ======================================

    Contents:

    .. toctree::
        :maxdepth: 2

        intro
        misc/tutorial

    .. automodule:: useful_1
        :members:

    .. automodule:: useful_2
        :members:
        :undoc-option:


    Indices and tables
    ==================

    * :ref:`genindex`
    * :ref:`modindex`
    * :ref:`search`


The TOC tree specifies the table of contents shown in the documentation:
::

    toctree

'maxdepth', 'titlesonly' and 'numbered' can be used to format the toc tree. See also
http://sphinx.pocoo.org/markup/toctree.html#toctree-directive

The following docstring directives are the most important ones, for a full list see
http://sphinx.pocoo.org/ext/autodoc.html#module-sphinx.ext.autodoc
::

    automodule
    autoclass
    autofunction
    automethod
    autoattribute
    autoexception

documents a module, class, function, attribute or exception. The 'members' shown in
the example option will document all module members recursively. Members without
docstring will be left out, unless a 'undoc-members' option is given.

'intro' and 'misc/tutorial' are documents in rst format that will be included in the
documentation having the folder that includes the 'conf.py' as root.


Configuration file *conf.py*
----------------------------

This file is automatically generated by the sphinx-quickbuilder and contains parameters like
paths, folder names, activated extension and so on. The parameters are described each in the
file itself and at http://sphinx.pocoo.org/config.html#

The most important ones are:

-   extensions = ['sphinx.ext.autodoc', 'sphinx.ext.doctest'], where 'autodoc' enables automatic
    docstring parsing and 'doctest' enables the automatic doctest function integrated in sphinx

-   source_suffix = '.rst', the source may be txt or rst

-   master_doc = 'index', the document containing the toctree

-   exclude_patterns = ['_build'], the files and directories ignored through generation

-   add_module_names = True, append module names to functions etc.

-   html_theme = "nexiles_theme", the theme (css, js etc.) used to display documentation

-   html_logo = './nexiles_logo_white.png', the logo placed above the sidebar

-   html_static_path = ['_static'], path to folder containing static files, like css

-   html_split_index = False, splits the index to separate pages per letter

-   html_show_sourcelink = True, creates a link to the reST source of every page


